plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}

	maven {
		name = "BlameJared"
		url = "https://maven.blamejared.com"
	}

	flatDir {
		dirs 'lib'
	}

	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroup 'org.ladysnake'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
}

def groovyLibs = fileTree(dir: 'lib', include: ['groovy-*.jar'])

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// openloader for data and resourcepacks
	modImplementation "net.darkhax.openloader:openloader-fabric-${project.minecraft_version}:${project.openloader_version}"


	implementation groovyLibs


	include(implementation "io.github.spair:imgui-java-binding:${project.imgui_version}")
	include(implementation "io.github.spair:imgui-java-lwjgl3:${project.imgui_version}") {
		exclude group: 'org.lwjgl'
	}

	// Satin for shader stuff, may do that myself at some point
	modImplementation "org.ladysnake:satin:${project.satin_version}"
	// Include Satin as a Jar-in-Jar dependency (optional)
	include "org.ladysnake:satin:${project.satin_version}"

	include(implementation "io.github.spair:imgui-java-natives-windows:${project.imgui_version}")

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from(groovyLibs.files.collect { zipTree(it) }) {
		exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
	}

	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}